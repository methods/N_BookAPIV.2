# ---
openapi: 3.0.3 
# --------------------------------------------
# Info
info:
  title: Book Collection API
  version: v1.0.0
  description: A simple API to manage a collection of books and their reservations.
  termsOfService: 'https://github.com/methods/N_BookAPIV.2'
  contact:
    email: booksAPI@example.com
  license:
    name: MIT License
    url: 'https://github.com/methods/N_BookAPIV.2/blob/main/LICENSE.md'

# --------------------------------------------
# Server
servers:
  - url: http://localhost:5000 
    description: Development server
    
# --------------------------------------------
# Tags
tags:
  - name: Books
    description: Operations related to books
  - name: Reservations
    description: Operations for creating and managing book reservations.
  - name: Authentication
    description: Endpoints for user authentication and session management.

# --------------------------------------------
# Components
components:
  schemas:
    # --- Book Schemas ---
    BookInput:
      type: object
      properties:
        title:
          type: string
          description: The title of the book.
          example: "The Hitchhiker's Guide to the Galaxy"
        synopsis:
          type: string
          description: A brief summary of the book.
          example: "Seconds before the Earth is demolished to make way for a galactic freeway..."
        author:
          type: string
          description: The author of the book.
          example: "Douglas Adams"
      required:
        - title
        - synopsis
        - author

    BookLinks:
      type: object
      properties:
        self:
          type: string
          description: Link to the book resource itself.
          example: "/books/123e4567-e89b-12d3-a456-426614174000"
        reservations:
          type: string
          description: Link to the collection of reservations for this book.
          example: "/books/123e4567-e89b-12d3-a456-426614174000/reservations"
      required:
        - self

    BookOutput:
      allOf:
        - $ref: '#/components/schemas/BookInput'
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the book (server-generated).
          readOnly: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        links:
          $ref: '#/components/schemas/BookLinks'
          readOnly: true

    BookListResponse:
      type: object
      properties:
        total_count:
          type: integer
          description: The total number of books available in the collection that match the query.
          example: 5432
        offset:
          type: integer
          description: The offset that was used for this page of results.
          example: 0
        limit:
          type: integer
          description: The limit that was used for this page of results.
          example: 20
        items:
          type: array
          items:
            $ref: '#/components/schemas/BookOutput'

    # --- Reservation Schemas ---
    ReservationUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The public ID of the user who made the reservation.
        name:
          type: string
          description: The name of the user who made the reservation.
          example: "Jane Doe"

    ReservationLinks:
      type: object
      properties:
        self:
          type: string
          description: Link to this specific reservation.
          example: "/books/123e4567-e89b-12d3-a456-426614174000/reservations/abc-123-def-456"
        book:
          type: string
          description: Link to the parent book of this reservation.
          example: "/books/123e4567-e89b-12d3-a456-426614174000"
      required:
        - self
        - book

    ReservationOutput:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the reservation.
          readOnly: true
          example: "abc-123-def-456"
        book_id:
          type: string
          format: uuid
          description: The ID of the book being reserved.
          readOnly: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        user_name:
          type: string
          description: The name of the user who made the reservation.
          readOnly: true
          example: "Jane Doe"
        state:
          type: string
          description: The current state of the reservation.
          readOnly: true
          example: "reserved"
        reservedAt:
          type: string
          format: date-time
          description: The UTC timestamp when the reservation was created.
          readOnly: true
          example: "2025-07-10T14:48:00.000Z"

    # --- General Schemas ---
    Error:
      type: object
      properties:
        error:
          type: string
          description: A message describing the error.
      required:
        - error

  securitySchemes:
    cookieAuth:
      type: cookie
      in: cookie
      name: session
      description: >
        Session cookie obtained after a successful login via the `/auth/login` 
        browser-based flow. This cookie must be included in all subsequent
        requests to protected endpoints.
# --------------------------------------------
# Paths
paths:
# --------------------------------------------
  /books:
# --------------------------------------------
    post:
      tags:
        - Books
      summary: Add a new book
      description: >
        Adds a new book to the collection. Requires 'admin' or 'editor' role. 
        The server will generate a unique ID and HATEOAS links for the new book.
      operationId: addBook
      # Security information
      security:
        - cookieAuth: []
      requestBody:
        description: Book object that needs to be added to the store.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput'
        '401':
          description: Unauthorized - The user is not logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Unauthorized"
        '403':
          description: Forbidden - The user is logged in but lacks the required 'admin' or 'editor' role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Forbidden"
        '400': 
          description: Invalid input provided or missing fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missingFields:
                  summary: Example of missing fields error
                  value:
                    error: "Missing required fields: title, synopsis"
                notADictionary:
                  summary: Example of payload not being a dictionary
                  value:
                    error: "JSON payload must be a dictionary"
                incorrectFieldTypeInternal:
                  summary: Example of internal field type validation error 
                  value:
                    error: "Field title is not of type <class 'str'>"
        '415': 
          description: Request payload is not JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Request must be JSON"
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "An unexpected error occurred."
    # --------------------------------------------
    get:
      tags:
        - Books
      summary: Returns a paginated list of books
      description: Retrieve a paginated list of all active books from the database.
      operationId: getAllBooks
      parameters:
        - name: offset
          in: query
          required: false
          description: The number of items to skip for pagination.
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          required: false
          description: The maximum number of items to return per page. The server enforces a maximum of 100.
          schema:
            type: integer
            minimum: 0
            maximum: 100 # Documents the server-side cap
            default: 20
      responses:
        '200':
          description: A paginated list of books.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookListResponse'
        '400':
          description: Invalid pagination parameters provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                nonInteger:
                  summary: Non-integer value for offset or limit
                  value:
                    error: "offset and limit must be integers."
                negativeValue:
                  summary: Negative value for offset or limit
                  value:
                    error: "offset and limit must be non-negative integers."
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # --------------------------------------------
  /books/{book_id}: 
  # --------------------------------------------
    get:
      tags:
        - Books 
      summary: Get a book by ID
      description: Retrieves a single book resource by its unique identifier.
      operationId: getBookById 
      parameters: 
        - name: book_id 
          in: path 
          required: true 
          description: The unique identifier of the book to retrieve.
          schema:
            type: string
            format: uuid 
            example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
      responses:
        '200': 
          description: Successfully retrieved the book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput' 
        '404': 
          description: Book not found. The requested book ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
              example:
                bookNotFound:
                  summary: Example of a book not found error
                  value:
                    error: "Book not found"
        '500': 
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
              example: 
                error: "An unexpected error occurred."
     # --------------------------------------------

    put:
      tags:
        - Books
      summary: Update a book
      description: Updates an existing book by its unique ID. The entire book object must be provided in the request body.
      operationId: updateBook
      # Security information
      security:
        - cookieAuth: [ ]
      parameters:
        - name: book_id
          in: path
          required: true
          description: The unique identifier of the book to update.
          schema:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
      requestBody:
        description: Book object that needs to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully. Returns the full updated book object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput'
        '400':
          description: Invalid input, or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missingFields:
                  summary: Example of missing fields error
                  value:
                    error: "Missing required fields: title"
                notADictionary:
                  summary: Example of payload not being a dictionary
                  value:
                    error: "JSON payload must be a dictionary"
        '401':
          description: Unauthorized - The user is not logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Unauthorized"
        '403':
          description: Forbidden - The user is logged in but lacks the required 'admin' or 'editor' role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Forbidden"
        '404':
          description: Book not found. The requested book ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Book not found"
        '415':
          description: Request payload is not JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Request must be JSON"
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Book collection not initialized"
    # --------------------------------------------
    
    delete:
      tags:
        - Books
      summary: Delete a book by ID
      description: Soft deletes a book by setting its state to 'deleted'.
      operationId: deleteBookById
      # Security information
      security:
        - cookieAuth: [ ]
      parameters:
        - name: book_id
          in: path
          required: true
          description: The unique identifier of the book to delete.
          schema:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
      responses:
        '204':
          description: Book deleted successfully.
        '401':
          description: Unauthorized - The user is not logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Unauthorized"
        '403':
          description: Forbidden - The user is logged in but lacks the required 'admin' role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Forbidden"
        '404':
          description: Book not found. The requested book ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Book not found"
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "An unexpected error occurred."

  # --- NEW RESERVATION PATH ---
  /books/{book_id}/reservations:
    post:
      tags:
        - Reservations
      summary: Create a reservation for a book
      description: >
        Creates a new reservation for a specific book. Requires the user to be authenticated.
        The user's details for the reservation will be taken from their authenticated session.
        This endpoint does not accept a request body.
      operationId: createReservation
      security:
        - cookieAuth: [ ] # This endpoint is protected
      parameters:
        - name: book_id
          in: path
          required: true
          description: The unique identifier of the book to reserve.
          schema:
            type: string
            format: uuid
      # No requestBody is needed as user info comes from the session (g.user)
      responses:
        '201':
          description: Reservation created successfully.
          headers:
            Location:
              description: The URL of the newly created reservation.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationOutput'
        '401':
          description: Unauthorized - The user is not logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Unauthorized"
        '404':
          description: Book not found. The book ID provided does not correspond to an active book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Book not found"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
 # --- NEW PATH FOR SPECIFIC RESERVATIONS ---
  /reservations:
    get:
      tags:
        - Reservations
      summary: List reservations
      description: >
        Retrieves a list of reservations.
        - Regular users will see only their own reservations.
        - Admin users will see all reservations by default.
        - Admin users can filter by a specific user's ID.
      operationId: listReservations
      security:
        - cookieAuth: [ ]
      parameters:
        - name: user_id
          in: query
          required: false
          description: "(Admin only) The public UUID of a user to filter reservations by."
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of reservation objects. The list will be empty if none are found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationOutput'
        '401':
          description: Unauthorized - The user is not logged in.
  /books/{book_id}/reservations/{reservation_id}:
    parameters:
      - name: book_id
        in: path
        required: true
        description: The unique identifier of the parent book.
        schema:
          type: string
          format: uuid
      - name: reservation_id
        in: path
        required: true
        description: The unique identifier of the reservation.
        schema:
          type: string
          format: uuid

    get:
      tags:
        - Reservations
      summary: Get a specific reservation
      description: >
        Retrieves a single reservation by its unique ID. 
        Access is restricted to the user who owns the reservation or an administrator.
      operationId: getReservationById
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Successfully retrieved the reservation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationOutput'
        '401':
          description: Unauthorized - The user is not logged in.
        '403':
          description: Forbidden - The user is not the owner of this reservation and is not an admin.
        '404':
          description: Reservation not found.

    delete:
      tags:
        - Reservations
      summary: Cancel a reservation
      description: >
        Cancels an active reservation by setting its state to 'cancelled'. 
        This is a soft delete. Access is restricted to the reservation owner or an admin.
      operationId: cancelReservationById
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Reservation cancelled successfully. Returns the updated reservation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationOutput'
        '401':
          description: Unauthorized - The user is not logged in.
        '403':
          description: Forbidden - The user is not the owner of this reservation and is not an admin.
        '404':
          description: Reservation not found or is not in a cancellable state.

# ---AUTHENTICATION PATHS--------------------
  /auth/login:
    get:
      tags:
        - Authentication
      summary: Initiate Login Flow (Browser Only)
      description: >
        This endpoint is the starting point for user authentication. 
        It is intended to be used in a web browser. Accessing this URL will
        redirect the user to the Google OAuth 2.0 consent screen. It does not
        return JSON.
      responses:
        '302':
          description: >
            Redirect to the Google authentication page. The `Location` header
            will contain the URL for the Google consent screen.

  /auth/callback:
    get:
      tags:
        - Authentication
      summary: OAuth Callback Endpoint (Browser Only)
      description: >
        This endpoint should not be called directly. It is the target for the
        redirect from Google after a user grants consent. The server handles
        the token exchange, creates a user session, and sets a `session` cookie.
      parameters:
        - name: code
          in: query
          required: true
          description: The one-time authorization code from Google.
          schema:
            type: string
        - name: state
          in: query
          required: true
          description: A security token to prevent CSRF attacks.
          schema:
            type: string
      responses:
        '302':
          description: >
            Successful authentication. The user is redirected to the main
            application dashboard (e.g., `/books`). The response includes a
            `Set-Cookie` header with the user's session.
        '401':
          description: Authentication failed (e.g., user denied access).

  /auth/logout:
    get:
      tags:
        - Authentication
      summary: Log Out User (Browser Only)
      description: >
        Logs the current user out by clearing their session. This endpoint
        requires an active session cookie to be present.
      security:
        - cookieAuth: [] # This endpoint is protected
      responses:
        '302':
          description: >
            Successful logout. The user is redirected to the application's
            homepage. The response includes a `Set-Cookie` header that
            clears the session cookie.
        '401':
          description: Unauthorized. User was not logged in.